{
  "rules": [
    {
      "type": "prd",
      "content": "# 연화당 정통사주 – PRD\n\n## 1. 개요\n전통 사주(사주팔자)를 AI 기술과 웹툰 형식으로 재해석하여, 20‒30대 여성이 쉽고 재미있게 자신의 운세를 이해하고 공유할 수 있도록 돕는 온라인 서비스입니다. 입력(생년월일시·성별·이름·전화번호) → 결제(29,800원) → 결과 확인(웹툰 이미지 + AI 해석) 흐름을 최소 클릭으로 제공합니다.\n\n## 2. 문제 정의\n• 전통 사주 해석은 난해한 전문 용어와 텍스트 위주 결과로 인해 초심자에게 진입 장벽이 높다.  \n• 모바일 친화적이지 않은 서비스가 많아 20‒30대 사용자의 사용 경험이 떨어진다.  \n• 결과가 지루해 SNS 공유·바이럴이 잘 일어나지 않는다.\n\n## 3. 제품 목표\n1. 사용자가 사주를 ‘재미있고 직관적’으로 이해하도록 돕는다.  \n2. 결제 전환율 5% 이상, 평균 세션 길이 4분 이상 달성.  \n3. 결과 공유 버튼 클릭률 20% 이상 달성.\n\n## 4. 대상 사용자\n• 핵심 타깃: 20‒30대 여성, 트렌디한 시각 콘텐츠 선호, SNS 사용이 활발함.\n\n## 5. 주요 사용 시나리오\n“생일을 맞아 사주가 궁금한 27세 여성 A씨가 모바일로 ‘연화당 정통사주’에 접속해 5분 만에 종합 사주 결과를 확인하고, 웹툰 결과를 인스타그램 스토리로 공유한다.”\n\n## 6. 핵심 가치 제안\n• 정통 만세력 + GPT 해석으로 전문성과 재미를 동시에 제공.  \n• ‘잘생긴 여우’ 캐릭터가 안내하는 웹툰 결과로 몰입감 극대화.  \n• 결제 후 즉시 확인 가능한 실시간 결과 생성.\n\n## 7. 주요 기능 (MVP)\n1. **입력 폼 & 유효성 검사**: 생년월일시, 성별, 이름, 전화번호, 궁금한 점 입력.  \n2. **결제 모듈**: 카드·간편결제(카카오·네이버) 연동, 1건 29,800원.  \n3. **만세력 변환 API 연동**: Next.js 서버→PHP 서버 호출하여 사주팔자 데이터 수신.  \n4. **GPT 해석 및 이미지 생성**: 프롬프트 기반 텍스트·이미지 생성.  \n5. **웹툰 결과 페이지**: 캐릭터·패널 구조 이미지 + 해석 텍스트 표시, 반응형.  \n6. **SNS 공유**: 인스타·카카오 링크 카드 공유.  \n7. **사용자 계정 & 결과 보관**: 이메일 기반 간단 가입, 내 결과 열람.\n\n### 확장 기능 (Post-MVP)\n• 오늘의 운세 알림(푸시·메일)  \n• 결과 PDF 다운로드  \n• 친구 초대 할인 & 바이럴 캠페인\n\n## 8. 비포함 범위\n• 전문가 1:1 채팅 상담  \n• 커뮤니티·게시판 기능  \n• 오프라인 상담 예약\n\n## 9. 성공 지표\n| 지표 | 목표 |\n| --- | --- |\n| 결제 전환율 | ≥ 5% |\n| 공유 클릭률 | ≥ 20% |\n| 페이지 로드 ≤ | 2.5s |\n| 고객 만족도 (CS 5점 척도) | ≥ 4.0 |\n\n## 10. 기술 및 운영 요구\n• 플랫폼: 반응형 Web (Next.js 15, Typescript, TailwindCSS, shadcn UI)  \n• 백엔드: Next.js API Routes + Supabase DB  \n• 외부 연동: PHP 만세력 서버, OpenAI API, 결제 PG (아임포트)  \n• 배포: Vercel + Supabase  \n• 가격: 29,800원/건 (메타 광고비 30% 포함)\n\n## 11. 제약 및 위험\n| 영역 | 리스크 | 대응 |\n| --- | --- | --- |\n| 만세력 정확도 | PHP 라이브러리 오류 | 검증 샘플 100건 Cross-check |\n| AI 이미지 지연 | 생성 지연으로 UX 저하 | 이미지 프리셋 + 캐싱 |\n| 결제 실패 | PG 장애 | 재시도·무통장 예치 옵션 |\n\n## 12. 일정(예상)\n| 주차 | 목표 산출물 |\n| --- | --- |\n| 1주 | 화면 설계, IA, UI 킷 선정 |\n| 2주 | 입력·결제 플로우 UI, PG 연동 |\n| 3주 | PHP 만세력 API, GPT 연동 POC |\n| 4주 | 결과 페이지 웹툰 뷰어 구현 |\n| 5주 | 계정·이력, 공유 기능, QA |\n| 6주 | 베타 런칭 & 페이스북/인스타 광고 집행 |\n\n## 13. 사용자 스토리 (요약)\n• U-001: “나는 생년월일을 입력하고 5분 내 결과를 확인하고 싶다.”  \n• U-002: “나는 결제 내역과 결과를 언제든 다시 보고 싶다.”  \n• U-003: “나는 재미있는 결과 이미지를 친구와 공유하고 싶다.”\n\n## 14. 가정\n• 29,800원 가격이 타깃에게 수용 가능하다.  \n• Instagram 광고·바이럴만으로 초기 1만 트래픽 확보 가능하다.\n\n## 15. 승인\nPM: ____  | CEO: ____  | 디자인 리드: ____  | 개발 리드: ____",
      "writedAt": "2025-09-20T07:35:45.520Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n  \n## Tech Stack\n\nNext.js 15, Typescript, TailwindCSS, shadcn, lucide-react, @tanstack/react-query, supabase(postgresql), OpenAI API, PHP(만세력), Vercel, date-fns, es-toolkit\n\n## Directory Structure\n\n\n/\n├── src/\n│   ├── app/                    # Next.js app router\n│   ├── components/             # common components\n│   │   └── ui/                 # shadcn/ui components\n│   ├── features/               # custom hooks (handle business logic)\n│   │   └── [featureName]/      # feature-based directory\n│   │   │   └── components/     # feature-based components\n│   │   │   └── hooks/          # feature-based hooks\n│   │   │   └── lib/            # feature-based lib\n│   │   │   └── pages/          # feature-based page components\n│   │   │   └── api.ts          # feature-based api callers\n│   │   │   └── schema.ts       # feature-based api schemas (zod)\n│   │   │   └── constants.ts    # feature-based constants\n│   │   │   └── types.ts        # feature-based types\n│   │   │   └── utils.ts        # feature-based utils\n│   │   └── ...                 # other features\n│   ├── hooks/                  # common hooks\n│   ├── lib/                    \n│   │   └── utils.ts            # shadcn cn utility function\n├── public/                     # static assets\n└── supabase/migrations         # supabase migrations (0000_name.sql)\n\n  ",
      "writedAt": "2025-09-20T07:35:45.520Z"
    },
    {
      "type": "guideline",
      "content": "\n    # Senior Developer Guidelines\n    \n    ## Must\n    \n    - always use client component for all components. (use `use client` directive)\n    - always use promise for page.tsx params props.\n    - use valid picsum.photos stock image for placeholder image\n    \n    ## Library\n    \n    use following libraries for specific functionalities:\n    \n    1. `date-fns`: For efficient date and time handling.\n    2. `ts-pattern`: For clean and type-safe branching logic.\n    3. `@tanstack/react-query`: For server state management.\n    4. `zustand`: For lightweight global state management.\n    5. `react-use`: For commonly needed React hooks.\n    6. `es-toolkit`: For robust utility functions.\n    7. `lucide-react`: For customizable icons.\n    8. `zod`: For schema validation and data integrity.\n    9. `shadcn-ui`: For pre-built accessible UI components.\n    10. `tailwindcss`: For utility-first CSS styling.\n    11. `supabase`: For a backend-as-a-service solution.\n    12. `react-hook-form`: For form validation and state management.\n    \n    ## Directory Structure\n    \n    - src\n    - src/app: Next.js App Routers\n    - src/components/ui: shadcn-ui components\n    - src/constants: Common constants\n    - src/hooks: Common hooks\n    - src/lib: utility functions\n    - src/remote: http client\n    - src/features/[featureName]/components/*: Components for specific feature\n    - src/features/[featureName]/constants/*\n    - src/features/[featureName]/hooks/*\n    - src/features/[featureName]/lib/*\n    - src/features/[featureName]/api.ts: api fetch functions\n    \n    ## Solution Process:\n    \n    1. Rephrase Input: Transform to clear, professional prompt.\n    2. Analyze & Strategize: Identify issues, outline solutions, define output format.\n    3. Develop Solution:\n       - \"As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:\"\n       - List steps numerically.\n       - \"To resolve these steps, I need the following solutions:\"\n       - List solutions with bullet points.\n    4. Validate Solution: Review, refine, test against edge cases.\n    5. Evaluate Progress:\n       - If incomplete: Pause, inform user, await input.\n       - If satisfactory: Proceed to final output.\n    6. Prepare Final Output:\n       - ASCII title\n       - Problem summary and approach\n       - Step-by-step solution with relevant code snippets\n       - Format code changes:\n        ```language:path/to/file\n         // ... existing code ...\n         function exampleFunction() {\n             // Modified or new code here\n         }\n         // ... existing code ...\n         ```\n       - Use appropriate formatting\n       - Describe modifications\n       - Conclude with potential improvements\n    \n    ## Key Mindsets:\n    \n    1. Simplicity\n    2. Readability\n    3. Maintainability\n    4. Testability\n    5. Reusability\n    6. Functional Paradigm\n    7. Pragmatism\n    \n    ## Code Guidelines:\n    \n    1. Early Returns\n    2. Conditional Classes over ternary\n    3. Descriptive Names\n    4. Constants > Functions\n    5. DRY\n    6. Functional & Immutable\n    7. Minimal Changes\n    8. Pure Functions\n    9. Composition over inheritance\n    \n    ## Functional Programming:\n    \n    - Avoid Mutation\n    - Use Map, Filter, Reduce\n    - Currying and Partial Application\n    - Immutability\n    \n    ## Code-Style Guidelines\n    \n    - Use TypeScript for type safety.\n    - Follow the coding standards defined in the ESLint configuration.\n    - Ensure all components are responsive and accessible.\n    - Use Tailwind CSS for styling, adhering to the defined color palette.\n    - When generating code, prioritize TypeScript and React best practices.\n    - Ensure that any new components are reusable and follow the existing design patterns.\n    - Minimize the use of AI generated comments, instead use clearly named variables and functions.\n    - Always validate user inputs and handle errors gracefully.\n    - Use the existing components and pages as a reference for the new components and pages.\n    \n    ## Performance:\n    \n    - Avoid Premature Optimization\n    - Profile Before Optimizing\n    - Optimize Judiciously\n    - Document Optimizations\n    \n    ## Comments & Documentation:\n    \n    - Comment function purpose\n    - Use JSDoc for JS\n    - Document \"why\" not \"what\"\n    \n    ## Function Ordering:\n    \n    - Higher-order functionality first\n    - Group related functions\n    \n    ## Handling Bugs:\n    \n    - Use TODO: and FIXME: comments\n    \n    ## Error Handling:\n    \n    - Use appropriate techniques\n    - Prefer returning errors over exceptions\n    \n    ## Testing:\n    \n    - Unit tests for core functionality\n    - Consider integration and end-to-end tests\n    \n    ## Next.js\n    \n    - you must use promise for page.tsx params props.\n    \n    ## Shadcn-ui\n    \n    - if you need to add new component, please show me the installation instructions. I'll paste it into terminal.\n    - example\n      ```\n      $ npx shadcn@latest add card\n      $ npx shadcn@latest add textarea\n      $ npx shadcn@latest add dialog\n      ```\n    \n    ## Supabase\n    \n    - if you need to add new table, please create migration. I'll paste it into supabase.\n    - do not run supabase locally\n    - store migration query for `.sql` file. in /supabase/migrations/\n    \n    ## Package Manager\n    \n    - use npm as package manager.\n    \n    ## Korean Text\n    \n    - 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.\n    \n    You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code.\n    Apply these principles judiciously, considering project and team needs.\n      ",
      "writedAt": "2025-09-20T07:35:45.520Z"
    },
    {
      "type": "design-guide",
      "content": "# 연화당 정통사주 Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n\n**Fun & Trendy Korean Traditional**\n\n연화당 정통사주는 전통 사주를 현대적이고 재미있게 재해석한 서비스로, 20-30대 여성 사용자가 친근하고 즐겁게 접근할 수 있는 디자인 무드를 추구합니다. 전통적인 한국의 아름다움을 현대적 감각으로 표현하되, 무겁거나 딱딱하지 않은 밝고 경쾌한 분위기를 조성합니다.\n\n핵심 키워드:\n- **친근함**: 잘생긴 여우 캐릭터를 통한 친밀한 소통\n- **현대성**: 웹툰 형식의 시각적 결과물과 트렌디한 컬러\n- **신뢰성**: 정통 만세력 기반의 전문성을 시각적으로 표현\n- **공유성**: SNS 친화적인 비주얼과 인터랙션\n\n## 2. Reference Service (참조 서비스)\n\n- **Name**: Kakao Friends Store\n- **Description**: 카카오프렌즈 캐릭터 상품을 판매하는 온라인 스토어\n- **Design Mood**: 밝고 귀여운 캐릭터 중심의 친근한 디자인, 파스텔 계열의 고채도 컬러 사용\n- **Primary Color**: #FFE15D (카카오 옐로우)\n- **Secondary Color**: #FF6B6B (포인트 핑크)\n\n카카오프렌즈 스토어의 캐릭터 중심 레이아웃과 밝은 컬러 팔레트, 친근한 UI 요소들을 참고하여 연화당만의 독특한 여우 캐릭터와 한국 전통 요소를 결합한 디자인을 구현합니다.\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n### 주요 컬러 팔레트\n- **Primary Color**: #FF6C8B (Main Blossom Pink)\n- **Secondary Color**: #38D0A6 (Accent Mint)\n- **Accent Color**: #FFD966 (Sunshine Yellow)\n- **Background Color**: #FFF9F9 (Neutral Off-White)\n- **Text Color**: #333333 (Dark Text)\n\n### 보조 컬러\n- **Success**: #38D0A6 (Accent Mint와 동일)\n- **Warning**: #FFD966 (Sunshine Yellow와 동일)\n- **Error**: #FF4757\n- **Info**: #5352ED\n\n### 그레이스케일\n- **Gray 50**: #F8F9FA\n- **Gray 100**: #F1F3F4\n- **Gray 300**: #DEE2E6\n- **Gray 500**: #868E96\n- **Gray 700**: #495057\n- **Gray 900**: #212529\n\n**Mood**: Warm / High Saturation\n**Color Usage**: \n1. Primary Color (Blossom Pink) - CTA 버튼, 중요 텍스트, 활성 상태\n2. Secondary Color (Accent Mint) - 링크, 보조 액션, 성공 상태\n3. Accent Color (Sunshine Yellow) - 배경 강조, 팁 박스, 알림\n4. 중요도가 낮은 UI 요소일수록 그레이스케일 활용\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n### 폰트 패밀리\n- **Primary**: Pretendard (한글), Inter (영문)\n- **Character Speech**: Gmarket Sans Medium (캐릭터 대화)\n- **Fallback**: -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif\n\n### 타이포그래피 스케일\n- **Heading 1**: Pretendard Bold, 32px, Line-height 1.2, Letter-spacing -0.02em\n- **Heading 2**: Pretendard Bold, 28px, Line-height 1.25, Letter-spacing -0.01em\n- **Heading 3**: Pretendard SemiBold, 24px, Line-height 1.3\n- **Heading 4**: Pretendard SemiBold, 20px, Line-height 1.35\n- **Body Large**: Pretendard Regular, 18px, Line-height 1.6\n- **Body**: Pretendard Regular, 16px, Line-height 1.6\n- **Body Small**: Pretendard Regular, 14px, Line-height 1.5\n- **Caption**: Pretendard Medium, 12px, Line-height 1.4\n\n### 특수 용도\n- **Character Speech**: Gmarket Sans Medium, 18px, Line-height 1.4\n- **Logo Text**: Pretendard ExtraBold, 24px\n\n## 5. Layout & Structure (레이아웃 & 구조)\n\n### 그리드 시스템\n- **데스크톱**: 12 컬럼 그리드, 최대 너비 1200px\n- **태블릿**: 8 컬럼 그리드, 최대 너비 768px\n- **모바일**: 4 컬럼 그리드, 최소 너비 320px\n\n### 여백 시스템\n- **기본 단위**: 4px\n- **컴포넌트 간격**: 16px, 24px, 32px, 48px\n- **섹션 간격**: 64px, 80px, 96px\n- **페이지 패딩**: 16px (모바일), 24px (태블릿), 32px (데스크톱)\n\n### 레이아웃 원칙\n1. **모바일 퍼스트**: 320px부터 시작하는 반응형 디자인\n2. **컨텐츠 중심**: 사용자 입력과 결과 표시에 최적화\n3. **스크롤 친화적**: 세로 스크롤을 활용한 자연스러운 정보 흐름\n4. **터치 최적화**: 최소 44px 터치 영역 확보\n\n## 6. Visual Style (비주얼 스타일)\n\n### 아이콘 스타일\n- **아이콘 세트**: Lucide React\n- **스트로크**: 1.5px\n- **크기**: 16px, 20px, 24px, 32px\n- **스타일**: 미니멀한 라인 아이콘, 둥근 모서리\n\n### 일러스트레이션\n- **캐릭터**: 잘생긴 여우 캐릭터 (3가지 포즈: 인사, 설명, 축하)\n- **웹툰 패널**: 1080×1920px, 4-6컷 세로 스크롤 형태\n- **스타일**: 부드러운 라인, 따뜻한 컬러, 친근한 표정\n\n### 이미지 정책\n- **AI 생성 이미지**: 2048px 이상, WebP 형식, CDN 캐시\n- **웹툰 패널**: JPG 80% 품질, Lazy Loading 적용\n- **아이콘**: SVG 형식 우선, PNG 백업\n\n### 그림자 및 효과\n- **카드 그림자**: 0 2px 8px rgba(0, 0, 0, 0.1)\n- **버튼 그림자**: 0 2px 4px rgba(255, 108, 139, 0.2)\n- **모서리**: 8px, 12px, 16px 라운드 처리\n\n## 7. UX Guide (UX 가이드)\n\n### 타겟 사용자: 초보자 중심 (20-30대 여성)\n\n### 핵심 UX 원칙\n1. **직관적 흐름**: 입력 → 결제 → 결과 확인까지 최소 클릭\n2. **즉시 피드백**: 모든 액션에 대한 즉각적인 시각적 피드백\n3. **친근한 가이드**: 여우 캐릭터를 통한 단계별 안내\n4. **오류 방지**: 실시간 유효성 검사와 명확한 오류 메시지\n\n### 인터랙션 패턴\n- **프로그레스 바**: 단계별 진행 상황 표시\n- **로딩 애니메이션**: 여우 꼬리 흔들기 애니메이션 (3초 루프)\n- **버튼 호버**: Scale 1.02, Transition 0.15s\n- **페이지 전환**: 부드러운 슬라이드 애니메이션\n\n### 접근성 고려사항\n- **컬러 대비**: WCAG AA 기준 충족 (4.5:1 이상)\n- **최소 폰트 크기**: 14px 이상\n- **터치 영역**: 최소 44px × 44px\n- **키보드 네비게이션**: Tab 순서와 Focus 표시\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n### 버튼\n**Primary Button**\n- 배경: #FF6C8B (Blossom Pink)\n- 텍스트: #FFFFFF, Pretendard SemiBold 16px\n- 패딩: 12px 24px\n- 라운드: 12px\n- 호버: Scale 1.02, 배경 #FF5A7A\n\n**Secondary Button**\n- 배경: transparent\n- 테두리: 2px solid #FF6C8B\n- 텍스트: #FF6C8B, Pretendard SemiBold 16px\n- 패딩: 10px 22px\n- 라운드: 12px\n\n### 입력 필드\n**Text Input**\n- 배경: #FFF9F9 (Off-White)\n- 테두리: 1px solid #DEE2E6\n- 텍스트: #333333, Pretendard Regular 16px\n- 플레이스홀더: #868E96 (70% opacity)\n- 패딩: 12px 16px\n- 라운드: 8px\n- Focus: 테두리 #FF6C8B, 그림자 0 0 0 3px rgba(255, 108, 139, 0.1)\n\n### 카드\n**Content Card**\n- 배경: #FFFFFF\n- 그림자: 0 2px 8px rgba(0, 0, 0, 0.1)\n- 라운드: 16px\n- 패딩: 24px\n- 테두리: none\n\n**Result Card**\n- 배경: linear-gradient(135deg, #FFF9F9 0%, #FFE15D 100%)\n- 그림자: 0 4px 12px rgba(255, 108, 139, 0.15)\n- 라운드: 20px\n- 패딩: 32px 24px\n\n### 내비게이션\n**Top Navigation**\n- 높이: 64px\n- 배경: #FFFFFF\n- 그림자: 0 2px 4px rgba(0, 0, 0, 0.05)\n- 로고: 좌측 정렬, Pretendard ExtraBold 24px\n- 메뉴: 우측 정렬, Pretendard Medium 16px\n\n### 알림 및 팁\n**Tip Box**\n- 배경: #FFD966 (Sunshine Yellow)\n- 텍스트: #333333, Pretendard Regular 14px\n- 패딩: 12px 16px\n- 라운드: 8px\n- 아이콘: 전구 아이콘 20px\n\n**Success Message**\n- 배경: #38D0A6\n- 텍스트: #FFFFFF\n- 아이콘: 체크 아이콘\n\n**Error Message**\n- 배경: #FF4757\n- 텍스트: #FFFFFF\n- 아이콘: 경고 아이콘\n\n### 로딩 상태\n**Loading Spinner**\n- 여우 꼬리 흔들기 Lottie 애니메이션\n- 크기: 80px × 80px\n- 배경: 반투명 오버레이 rgba(0, 0, 0, 0.3)\n- 텍스트: \"잠시만 기다려주세요...\" Pretendard Regular 16px\n\n### 웹툰 패널\n**Panel Container**\n- 최대 너비: 400px (모바일 최적화)\n- 배경: #FFFFFF\n- 그림자: 0 4px 16px rgba(0, 0, 0, 0.1)\n- 라운드: 16px\n- 여백: 각 패널 간 16px\n\n**Speech Bubble**\n- 배경: #FFF9F9\n- 테두리: 2px solid #FF6C8B\n- 텍스트: Gmarket Sans Medium 18px\n- 말꼬리: CSS pseudo-element로 구현",
      "writedAt": "2025-09-20T07:35:45.520Z"
    },
    {
      "type": "ia",
      "content": "# 연화당 정통사주 Information Architecture (IA)\n\n## 1. Site Map (사이트맵)\n\n```\n연화당 정통사주 (/)\n├── 홈 (/)\n├── 서비스 소개 (/about)\n├── 가격 안내 (/pricing)\n├── FAQ (/faq)\n├── 인증 (/auth)\n│   ├── 로그인 (/auth/login)\n│   ├── 회원가입 (/auth/signup)\n│   └── 비밀번호 찾기 (/auth/reset-password)\n├── 사주 보기 서비스 (/saju)\n│   ├── 정보 입력 (/saju/input)\n│   ├── 결제 (/saju/payment)\n│   ├── 결과 생성 대기 (/saju/processing)\n│   └── 결과 확인 (/saju/result/:id)\n├── 마이페이지 (/my) [인증 필요]\n│   ├── 내 정보 (/my/profile)\n│   ├── 내 결과 목록 (/my/results)\n│   ├── 결제 내역 (/my/payments)\n│   └── 설정 (/my/settings)\n├── 공유 페이지 (/share/:id)\n├── 이용약관 (/terms)\n├── 개인정보처리방침 (/privacy)\n└── 고객센터 (/support)\n```\n\n## 2. User Flow (사용자 흐름)\n\n### 주요 작업: 사주 보기 (신규 사용자)\n1. 홈페이지 접속 → '사주 바로 보기' CTA 클릭\n2. 정보 입력 페이지 → 생년월일시, 성별, 이름, 전화번호, 궁금한 점 입력\n3. 입력 정보 확인 → '결제하기' 버튼 클릭\n4. 결제 페이지 → 카드/간편결제 선택 및 결제 진행\n5. 결제 완료 → 결과 생성 대기 화면 (로딩 애니메이션)\n6. 결과 페이지 → 웹툰 형식 사주 결과 확인\n7. 결과 공유 → SNS 공유 버튼 클릭 또는 링크 복사\n\n### 주요 작업: 과거 결과 재확인 (기존 사용자)\n1. 홈페이지 접속 → '로그인' 클릭\n2. 로그인 페이지 → 이메일/비밀번호 입력 또는 소셜 로그인\n3. 마이페이지 → '내 결과 목록' 메뉴 클릭\n4. 결과 목록 → 원하는 결과 카드 클릭\n5. 결과 상세 페이지 → 과거 사주 결과 재확인\n6. 필요 시 공유 또는 PDF 다운로드\n\n### 주요 작업: 회원가입 및 계정 연동\n1. 결과 확인 후 → '내 결과 보관하기' 버튼 클릭\n2. 회원가입 페이지 → 이메일 입력 또는 소셜 로그인 선택\n3. 계정 생성 완료 → 현재 결과 자동 저장\n4. 마이페이지로 자동 이동 → 저장된 결과 확인\n\n## 3. Navigation Structure (네비게이션 구조)\n\n### Global Navigation Bar (GNB)\n**위치**: 상단 고정\n**구성 요소**:\n- 좌측: 연화당 로고 (홈으로 이동)\n- 우측: \n  - 비로그인 시: '로그인' 버튼\n  - 로그인 시: 프로필 아이콘 (드롭다운 메뉴)\n    - 내 정보\n    - 내 결과\n    - 설정\n    - 로그아웃\n\n### Footer Navigation\n**구성 요소**:\n- 회사 정보 (연화당, 사업자등록번호)\n- 법적 링크 (이용약관, 개인정보처리방침)\n- 고객센터 링크\n- SNS 링크 (인스타그램, 카카오톡)\n\n### Mobile Bottom Navigation (모바일 전용)\n**구성 요소**:\n- 홈 (집 아이콘)\n- 내 결과 (별 아이콘) [로그인 필요]\n- 사주보기 (중앙 원형 CTA)\n- FAQ (물음표 아이콘)\n- 마이페이지 (사용자 아이콘) [로그인 필요]\n\n## 4. Page Hierarchy (페이지 계층 구조)\n\n```\n/ (Depth 1)\n├── /about (Depth 2)\n├── /pricing (Depth 2)\n├── /faq (Depth 2)\n├── /auth (Depth 2)\n│   ├── /auth/login (Depth 3)\n│   ├── /auth/signup (Depth 3)\n│   └── /auth/reset-password (Depth 3)\n├── /saju (Depth 2)\n│   ├── /saju/input (Depth 3)\n│   ├── /saju/payment (Depth 3)\n│   ├── /saju/processing (Depth 3)\n│   └── /saju/result/:id (Depth 3)\n├── /my (Depth 2) [인증 필요]\n│   ├── /my/profile (Depth 3)\n│   ├── /my/results (Depth 3)\n│   ├── /my/payments (Depth 3)\n│   └── /my/settings (Depth 3)\n├── /share/:id (Depth 2)\n├── /terms (Depth 2)\n├── /privacy (Depth 2)\n└── /support (Depth 2)\n```\n\n## 5. Content Organization (콘텐츠 구성)\n\n| 페이지 | 주요 콘텐츠 요소 |\n|---|---|\n| 홈 (/) | Hero 섹션, 서비스 소개, 여우 캐릭터 일러스트, '사주 바로 보기' CTA, 후기 섹션, 가격 정보 |\n| 정보 입력 (/saju/input) | 프로그레스 바, 입력 폼 (생년월일시, 성별, 이름, 전화번호, 궁금한 점), 유효성 검사 메시지, 여우 캐릭터 가이드 |\n| 결제 (/saju/payment) | 입력 정보 요약, 가격 정보 (29,800원), 결제 수단 선택, 결제 버튼, 보안 안내 |\n| 결과 대기 (/saju/processing) | 여우 캐릭터 로딩 애니메이션, 진행 상황 텍스트, 예상 소요 시간 (15초) |\n| 결과 확인 (/saju/result/:id) | 웹툰 패널 이미지, AI 해석 텍스트, 공유 버튼, PDF 다운로드, '내 결과 보관' CTA |\n| 내 결과 목록 (/my/results) | 결과 카드 리스트, 날짜별 정렬, 검색 필터, 페이지네이션 |\n| 마이페이지 (/my/profile) | 사용자 정보, 프로필 편집 폼, 계정 연동 상태, 알림 설정 |\n\n## 6. Interaction Patterns (인터랙션 패턴)\n\n### 모달 사용 패턴\n- **로그인 모달**: 홈에서 '로그인' 클릭 시 오버레이 모달\n- **공유 모달**: 결과 페이지에서 '공유하기' 클릭 시 SNS 옵션 표시\n- **확인 모달**: 결제 전 최종 확인, 계정 삭제 등 중요 액션\n\n### 툴팁 및 도움말\n- **입력 필드 도움말**: 생년월일시 입력 시 양력/음력 안내\n- **가이드 툴팁**: 여우 캐릭터 말풍선으로 단계별 안내\n- **오류 메시지**: 실시간 유효성 검사 결과 표시\n\n### 무한 스크롤 및 페이지네이션\n- **결과 페이지**: 웹툰 패널의 세로 무한 스크롤\n- **내 결과 목록**: 카드 기반 페이지네이션 (10개씩)\n- **FAQ 페이지**: 아코디언 방식 확장/축소\n\n### 로딩 상태 관리\n- **페이지 로딩**: 여우 꼬리 흔들기 애니메이션\n- **결제 처리**: 프로그레스 바와 단계별 안내\n- **이미지 로딩**: 스켈레톤 UI로 레이아웃 유지\n\n## 7. URL Structure (URL 구조)\n\n### URL 명명 규칙\n- **일반 페이지**: `/resource-name` (소문자, 하이픈 사용)\n- **상세 페이지**: `/resource-name/:id` (동적 파라미터)\n- **중첩 리소스**: `/parent/child` (최대 3단계 깊이)\n- **인증 페이지**: `/auth/action` (auth 네임스페이스)\n\n### SEO 친화적 URL 예시\n```\n/ (홈페이지)\n/about (서비스 소개)\n/pricing (가격 안내)\n/faq (자주 묻는 질문)\n/auth/login (로그인)\n/auth/signup (회원가입)\n/saju/input (정보 입력)\n/saju/payment (결제)\n/saju/result/abc123 (결과 확인)\n/my/results (내 결과 목록)\n/share/abc123 (공유 페이지)\n/terms (이용약관)\n/privacy (개인정보처리방침)\n```\n\n### 동적 라우팅\n- `/saju/result/:resultId` - 개별 사주 결과\n- `/share/:resultId` - 공유용 결과 페이지\n- `/my/results/:resultId` - 내 결과 상세 보기\n\n## 8. Component Hierarchy (컴포넌트 계층 구조)\n\n### Global Components (전역 컴포넌트)\n- **Header**: 로고, 네비게이션 메뉴, 로그인 상태\n- **Footer**: 회사 정보, 법적 링크, SNS 링크\n- **MobileBottomNav**: 모바일 하단 탭 네비게이션\n- **LoadingSpinner**: 여우 캐릭터 로딩 애니메이션\n- **Toast**: 성공/오류 알림 메시지\n\n### Layout Components (레이아웃 컴포넌트)\n- **PageLayout**: 기본 페이지 구조 (Header + Main + Footer)\n- **AuthLayout**: 인증 페이지 전용 레이아웃\n- **SajuFlowLayout**: 사주 보기 플로우 전용 레이아웃 (프로그레스 바 포함)\n- **MyPageLayout**: 마이페이지 사이드바 포함 레이아웃\n\n### Form Components (폼 컴포넌트)\n- **DateTimePicker**: 생년월일시 입력 (달력 + 시간 선택)\n- **GenderSelector**: 성별 선택 라디오 버튼\n- **PhoneInput**: 전화번호 입력 (자동 하이픈 추가)\n- **TextArea**: 궁금한 점 입력 (글자 수 제한 표시)\n- **ValidationMessage**: 실시간 유효성 검사 메시지\n\n### Card Components (카드 컴포넌트)\n- **ServiceIntroCard**: 홈페이지 서비스 소개 카드\n- **PricingCard**: 가격 정보 카드\n- **ResultCard**: 내 결과 목록의 개별 결과 카드\n- **PaymentSummaryCard**: 결제 페이지 주문 요약 카드\n- **TestimonialCard**: 후기 카드\n\n### Interactive Components (인터랙티브 컴포넌트)\n- **ProgressBar**: 단계별 진행 상황 표시\n- **ShareModal**: SNS 공유 모달\n- **LoginModal**: 로그인 오버레이 모달\n- **ConfirmDialog**: 확인/취소 다이얼로그\n- **ImageViewer**: 웹툰 패널 이미지 뷰어 (확대/축소)\n\n### Character Components (캐릭터 컴포넌트)\n- **FoxCharacter**: 여우 캐릭터 (3가지 상태: 인사, 설명, 축하)\n- **SpeechBubble**: 캐릭터 대화 말풍선\n- **FoxLoadingAnimation**: 여우 꼬리 흔들기 로딩 애니메이션\n\n### Payment Components (결제 컴포넌트)\n- **PaymentMethodSelector**: 결제 수단 선택 (카드/간편결제)\n- **PaymentForm**: 결제 정보 입력 폼\n- **PaymentResult**: 결제 완료/실패 결과 표시\n- **PGIntegration**: PG사 연동 컴포넌트\n\n### Result Components (결과 컴포넌트)\n- **WebtoonPanel**: 개별 웹툰 패널 표시\n- **WebtoonViewer**: 전체 웹툰 결과 뷰어 (스크롤 최적화)\n- **SajuSummary**: 사주 요약 정보\n- **ShareButtons**: 공유 버튼 그룹 (인스타그램, 카카오톡, 링크 복사)\n- **PDFDownloadButton**: PDF 다운로드 버튼",
      "writedAt": "2025-09-20T07:35:45.520Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-09-20T07:35:45.520Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-09-20T07:35:45.520Z"
    }
  ]
}