# Node.js → PHP API 연동 샘플 구현

**Task ID:** T-010
**Status:** BACKLOG
**Importance:** MUST
**Complexity:** 6/10
**Urgency:** 8/10
**Dependencies:** T-008, T-009

## Description

설명: Next.js 서버에서 PHP API(/api/convert)를 호출하는 샘플 라우트 및 에러 핸들링 예시를 구현한다.
요구사항: 1) Next.js 서버 라우트(app/api/convert-proxy/route.ts) 추가 2) POST 요청 바디를 그대로 PHP API로 전달 3) 타임아웃, 네트워크 오류, 비정상 상태코드 처리 4) 내부 전용 PHP_API_URL 사용 5) 샘플 요청/응답 스키마 주석 제공
구현 상세: - 환경변수: process.env.PHP_API_URL - fetch 옵션: method POST, headers application/json, AbortSignal.timeout(5000) - 오류 매핑: 5xx→502, 타임아웃→504, 검증 실패→400 - Next.js 15 App Router에 맞는 route handler 사용 - 개발 페이지는 선택적(문서에 curl 예시 제공)
의사코드: ```ts
// app/api/convert-proxy/route.ts
export async function POST(req: Request) {
  try {
    const input = await req.json();
    const res = await fetch(`${process.env.PHP_API_URL}/api/convert`, {
      method: 'POST', headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(input), cache: 'no-store', signal: AbortSignal.timeout(5000)
    });
    if (!res.ok) return new Response(JSON.stringify({ ok:false, code:'UPSTREAM_ERROR' }), { status: 502 });
    const data = await res.json();
    return Response.json(data);
  } catch (e:any) {
    const isTimeout = (e?.name === 'TimeoutError');
    return new Response(JSON.stringify({ ok:false, code: isTimeout ? 'TIMEOUT' : 'NETWORK_ERROR' }), { status: isTimeout ? 504 : 502 });
  }
}
```
테스트 전략: - 통합: docker compose up 후 POST /api/convert-proxy로 정상 플로우 확인 - 장애: php-api 중지 후 502 기대, 타임아웃 조정 후 504 기대 - 경계: 잘못된 입력 바디로 400/422 처리(추후 검증 추가 시) - 로깅: Next.js 서버 로그에서 에러 스택 확인

---

**Created:** 2025-09-20T07:59:58.180Z
**Updated:** 2025-09-20T07:59:58.180Z
